html {
    box-sizing: border-box;
    font-size: 62.5%;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    font-family: "Raleway", sans-serif;
    font-size: 1.6rem;
    line-height: 2;
}

img {
    max-width: 100%;
}

h1 {
    font-size: 4rem;
}

h2 {
    font-size: 3.2rem;
}

.contenedor {
    max-width: 1200px;
    width: 95%;
    margin: 0 auto;
}

p {
    font-size: 2rem;
}

.entrada-blog a {
    display: inline-block;
    background-color: #2196f3;
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    font-weight: bold;
    text-transform: uppercase;
}

/** CODIGO AQUI **/
/* SOLUCIÓN 1 
@media (min-width: 768px) {
    .tres-columnas {
        display: grid;
        grid-template-columns: 1fr 3fr 1fr; /* distribuye los 1eros hijos que encuentre (raíces)
        column-gap: 2rem;
        grid-auto-flow: column; /* 
        1- el flujo en el que se acumula el contenido será en columnas
        2- esto arregla el problema que genera grid al acomodar automaticamente el contenido
    }
    .aside-izquierdo {
        grid-column: 1 / 2;
    }
    .aside-derecho {
        grid-column: 3 / 4;
    }
}
*/

@media (min-width: 768px) {
    .tres-columnas {
        display: grid;
        grid-template-areas: "izquierda centro derecha"; /*
        1a- se usa areas cuando se complica el layout
        2a- esto facilita a colocación pq lo pone de manera descripciva y clara y así no trabajas con numeros
        */
        grid-template-columns: 1fr 3fr 1fr; /* 3a- las areas toman estas fracciones como referencia para colocarse */
        column-gap: 2rem;
        grid-auto-flow: column;
    }
    .aside-izquierdo {
        grid-area: izquierda;
    }
    .aside-derecho {
        grid-area: derecha;
    }
}
